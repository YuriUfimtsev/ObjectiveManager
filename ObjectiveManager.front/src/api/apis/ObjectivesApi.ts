/* tslint:disable */
/* eslint-disable */
/**
 * API Gateway
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ObjectiveDTO,
  ProblemDetails,
  StatusObjectDTO,
} from '../models/index';
import {
    ObjectiveDTOFromJSON,
    ObjectiveDTOToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    StatusObjectDTOFromJSON,
    StatusObjectDTOToJSON,
} from '../models/index';

export interface ApiObjectivesObjectiveIdDeleteRequest {
    objectiveId: string;
}

export interface ApiObjectivesObjectiveIdGetRequest {
    objectiveId: string;
}

export interface ApiObjectivesPostRequest {
    definition?: string;
    finalDate?: Date;
    comment?: string;
}

export interface ApiObjectivesStatusHistoryObjectiveIdGetRequest {
    objectiveId: string;
}

export interface ApiObjectivesUpdateInfoObjectiveIdPutRequest {
    objectiveId: string;
    definition?: string;
    finalDate?: Date;
    comment?: string;
}

export interface ApiObjectivesUpdateStatusObjectObjectiveIdPutRequest {
    objectiveId: string;
    statusValueId?: number;
    statusComment?: string;
}

/**
 * 
 */
export class ObjectivesApi extends runtime.BaseAPI {

    /**
     */
    async apiObjectivesAllGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ObjectiveDTO>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Objectives/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ObjectiveDTOFromJSON));
    }

    /**
     */
    async apiObjectivesAllGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ObjectiveDTO>> {
        const response = await this.apiObjectivesAllGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiObjectivesObjectiveIdDeleteRaw(requestParameters: ApiObjectivesObjectiveIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['objectiveId'] == null) {
            throw new runtime.RequiredError(
                'objectiveId',
                'Required parameter "objectiveId" was null or undefined when calling apiObjectivesObjectiveIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Objectives/{objectiveId}`.replace(`{${"objectiveId"}}`, encodeURIComponent(String(requestParameters['objectiveId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiObjectivesObjectiveIdDelete(requestParameters: ApiObjectivesObjectiveIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiObjectivesObjectiveIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiObjectivesObjectiveIdGetRaw(requestParameters: ApiObjectivesObjectiveIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ObjectiveDTO>> {
        if (requestParameters['objectiveId'] == null) {
            throw new runtime.RequiredError(
                'objectiveId',
                'Required parameter "objectiveId" was null or undefined when calling apiObjectivesObjectiveIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Objectives/{objectiveId}`.replace(`{${"objectiveId"}}`, encodeURIComponent(String(requestParameters['objectiveId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ObjectiveDTOFromJSON(jsonValue));
    }

    /**
     */
    async apiObjectivesObjectiveIdGet(requestParameters: ApiObjectivesObjectiveIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ObjectiveDTO> {
        const response = await this.apiObjectivesObjectiveIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiObjectivesPostRaw(requestParameters: ApiObjectivesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        if (requestParameters['definition'] != null) {
            queryParameters['Definition'] = requestParameters['definition'];
        }

        if (requestParameters['finalDate'] != null) {
            queryParameters['FinalDate'] = (requestParameters['finalDate'] as any).toISOString();
        }

        if (requestParameters['comment'] != null) {
            queryParameters['Comment'] = requestParameters['comment'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Objectives`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async apiObjectivesPost(requestParameters: ApiObjectivesPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.apiObjectivesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiObjectivesStatusHistoryObjectiveIdGetRaw(requestParameters: ApiObjectivesStatusHistoryObjectiveIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<StatusObjectDTO>>> {
        if (requestParameters['objectiveId'] == null) {
            throw new runtime.RequiredError(
                'objectiveId',
                'Required parameter "objectiveId" was null or undefined when calling apiObjectivesStatusHistoryObjectiveIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Objectives/statusHistory/{objectiveId}`.replace(`{${"objectiveId"}}`, encodeURIComponent(String(requestParameters['objectiveId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StatusObjectDTOFromJSON));
    }

    /**
     */
    async apiObjectivesStatusHistoryObjectiveIdGet(requestParameters: ApiObjectivesStatusHistoryObjectiveIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<StatusObjectDTO>> {
        const response = await this.apiObjectivesStatusHistoryObjectiveIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiObjectivesUpdateInfoObjectiveIdPutRaw(requestParameters: ApiObjectivesUpdateInfoObjectiveIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['objectiveId'] == null) {
            throw new runtime.RequiredError(
                'objectiveId',
                'Required parameter "objectiveId" was null or undefined when calling apiObjectivesUpdateInfoObjectiveIdPut().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['definition'] != null) {
            queryParameters['Definition'] = requestParameters['definition'];
        }

        if (requestParameters['finalDate'] != null) {
            queryParameters['FinalDate'] = (requestParameters['finalDate'] as any).toISOString();
        }

        if (requestParameters['comment'] != null) {
            queryParameters['Comment'] = requestParameters['comment'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Objectives/updateInfo/{objectiveId}`.replace(`{${"objectiveId"}}`, encodeURIComponent(String(requestParameters['objectiveId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiObjectivesUpdateInfoObjectiveIdPut(requestParameters: ApiObjectivesUpdateInfoObjectiveIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiObjectivesUpdateInfoObjectiveIdPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiObjectivesUpdateStatusObjectObjectiveIdPutRaw(requestParameters: ApiObjectivesUpdateStatusObjectObjectiveIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['objectiveId'] == null) {
            throw new runtime.RequiredError(
                'objectiveId',
                'Required parameter "objectiveId" was null or undefined when calling apiObjectivesUpdateStatusObjectObjectiveIdPut().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['statusValueId'] != null) {
            queryParameters['StatusValueId'] = requestParameters['statusValueId'];
        }

        if (requestParameters['statusComment'] != null) {
            queryParameters['StatusComment'] = requestParameters['statusComment'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Objectives/updateStatusObject/{objectiveId}`.replace(`{${"objectiveId"}}`, encodeURIComponent(String(requestParameters['objectiveId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiObjectivesUpdateStatusObjectObjectiveIdPut(requestParameters: ApiObjectivesUpdateStatusObjectObjectiveIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiObjectivesUpdateStatusObjectObjectiveIdPutRaw(requestParameters, initOverrides);
    }

}
