/* tslint:disable */
/* eslint-disable */
/**
 * API Gateway
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AccountData,
  EditAccountDto,
  LoginViewModel,
  RegisterDto,
  TokenCredentials,
} from '../models/index';
import {
    AccountDataFromJSON,
    AccountDataToJSON,
    EditAccountDtoFromJSON,
    EditAccountDtoToJSON,
    LoginViewModelFromJSON,
    LoginViewModelToJSON,
    RegisterDtoFromJSON,
    RegisterDtoToJSON,
    TokenCredentialsFromJSON,
    TokenCredentialsToJSON,
} from '../models/index';

export interface ApiAccountEditPutRequest {
    editAccountDto?: EditAccountDto;
}

export interface ApiAccountLoginPostRequest {
    loginViewModel?: LoginViewModel;
}

export interface ApiAccountRegisterPostRequest {
    registerDto?: RegisterDto;
}

/**
 * 
 */
export class AccountApi extends runtime.BaseAPI {

    /**
     */
    async apiAccountEditPutRaw(requestParameters: ApiAccountEditPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Account/edit`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EditAccountDtoToJSON(requestParameters['editAccountDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiAccountEditPut(requestParameters: ApiAccountEditPutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiAccountEditPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiAccountLoginPostRaw(requestParameters: ApiAccountLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenCredentials>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Account/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginViewModelToJSON(requestParameters['loginViewModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenCredentialsFromJSON(jsonValue));
    }

    /**
     */
    async apiAccountLoginPost(requestParameters: ApiAccountLoginPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenCredentials> {
        const response = await this.apiAccountLoginPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAccountRegisterPostRaw(requestParameters: ApiAccountRegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenCredentials>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Account/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterDtoToJSON(requestParameters['registerDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenCredentialsFromJSON(jsonValue));
    }

    /**
     */
    async apiAccountRegisterPost(requestParameters: ApiAccountRegisterPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenCredentials> {
        const response = await this.apiAccountRegisterPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAccountUserDataGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountData>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Account/userData`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountDataFromJSON(jsonValue));
    }

    /**
     */
    async apiAccountUserDataGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountData> {
        const response = await this.apiAccountUserDataGetRaw(initOverrides);
        return await response.value();
    }

}
