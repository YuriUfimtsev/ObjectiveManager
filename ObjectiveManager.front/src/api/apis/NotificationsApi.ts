/* tslint:disable */
/* eslint-disable */
/**
 * API Gateway
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  NotificationDTO,
} from '../models/index';
import {
    NotificationDTOFromJSON,
    NotificationDTOToJSON,
} from '../models/index';

export interface ApiNotificationsUpdateFrequencyNotificationIdPutRequest {
    notificationId: string;
    frequencyId?: number;
}

/**
 * 
 */
export class NotificationsApi extends runtime.BaseAPI {

    /**
     */
    async apiNotificationsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotificationDTO>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Notifications`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationDTOFromJSON(jsonValue));
    }

    /**
     */
    async apiNotificationsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotificationDTO> {
        const response = await this.apiNotificationsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiNotificationsUpdateFrequencyNotificationIdPutRaw(requestParameters: ApiNotificationsUpdateFrequencyNotificationIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['notificationId'] == null) {
            throw new runtime.RequiredError(
                'notificationId',
                'Required parameter "notificationId" was null or undefined when calling apiNotificationsUpdateFrequencyNotificationIdPut().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['frequencyId'] != null) {
            queryParameters['frequencyId'] = requestParameters['frequencyId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Notifications/updateFrequency/{notificationId}`.replace(`{${"notificationId"}}`, encodeURIComponent(String(requestParameters['notificationId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiNotificationsUpdateFrequencyNotificationIdPut(requestParameters: ApiNotificationsUpdateFrequencyNotificationIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiNotificationsUpdateFrequencyNotificationIdPutRaw(requestParameters, initOverrides);
    }

}
