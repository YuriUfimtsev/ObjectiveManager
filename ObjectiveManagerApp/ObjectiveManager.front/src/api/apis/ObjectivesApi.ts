/* tslint:disable */
/* eslint-disable */
/**
 * ObjectiveManager.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Objective,
  ObjectiveStatus,
  ProblemDetails,
} from '../models/index';
import {
    ObjectiveFromJSON,
    ObjectiveToJSON,
    ObjectiveStatusFromJSON,
    ObjectiveStatusToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
} from '../models/index';

export interface ObjectivesObjectiveIdDeleteRequest {
    objectiveId: string;
}

export interface ObjectivesObjectiveIdGetRequest {
    objectiveId: string;
}

export interface ObjectivesPostRequest {
    definition?: string;
    finalDate?: Date;
    comment?: string;
}

export interface ObjectivesPutRequest {
    id?: string;
    definition?: string;
    status?: ObjectiveStatus;
    finalDate?: Date;
    comment?: string;
}

/**
 * 
 */
export class ObjectivesApi extends runtime.BaseAPI {

    /**
     */
    async objectivesAllGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Objective>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Objectives/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ObjectiveFromJSON));
    }

    /**
     */
    async objectivesAllGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Objective>> {
        const response = await this.objectivesAllGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async objectivesObjectiveIdDeleteRaw(requestParameters: ObjectivesObjectiveIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['objectiveId'] == null) {
            throw new runtime.RequiredError(
                'objectiveId',
                'Required parameter "objectiveId" was null or undefined when calling objectivesObjectiveIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Objectives/{objectiveId}`.replace(`{${"objectiveId"}}`, encodeURIComponent(String(requestParameters['objectiveId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async objectivesObjectiveIdDelete(requestParameters: ObjectivesObjectiveIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectivesObjectiveIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async objectivesObjectiveIdGetRaw(requestParameters: ObjectivesObjectiveIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Objective>> {
        if (requestParameters['objectiveId'] == null) {
            throw new runtime.RequiredError(
                'objectiveId',
                'Required parameter "objectiveId" was null or undefined when calling objectivesObjectiveIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Objectives/{objectiveId}`.replace(`{${"objectiveId"}}`, encodeURIComponent(String(requestParameters['objectiveId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ObjectiveFromJSON(jsonValue));
    }

    /**
     */
    async objectivesObjectiveIdGet(requestParameters: ObjectivesObjectiveIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Objective> {
        const response = await this.objectivesObjectiveIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async objectivesPostRaw(requestParameters: ObjectivesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        if (requestParameters['definition'] != null) {
            queryParameters['Definition'] = requestParameters['definition'];
        }

        if (requestParameters['finalDate'] != null) {
            queryParameters['FinalDate'] = (requestParameters['finalDate'] as any).toISOString();
        }

        if (requestParameters['comment'] != null) {
            queryParameters['Comment'] = requestParameters['comment'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Objectives`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async objectivesPost(requestParameters: ObjectivesPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.objectivesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async objectivesPutRaw(requestParameters: ObjectivesPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['Id'] = requestParameters['id'];
        }

        if (requestParameters['definition'] != null) {
            queryParameters['Definition'] = requestParameters['definition'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['Status'] = requestParameters['status'];
        }

        if (requestParameters['finalDate'] != null) {
            queryParameters['FinalDate'] = (requestParameters['finalDate'] as any).toISOString();
        }

        if (requestParameters['comment'] != null) {
            queryParameters['Comment'] = requestParameters['comment'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Objectives`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async objectivesPut(requestParameters: ObjectivesPutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.objectivesPutRaw(requestParameters, initOverrides);
    }

}
